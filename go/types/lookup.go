// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
// Source: ../../cmd/compile/internal/types2/lookup.go

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// このファイルは、さまざまなフィールドやメソッドの検索機能を実装しています。

package types

<<<<<<< HEAD
// LookupFieldOrMethodは、与えられたパッケージと名前でTというフィールドまたはメソッドを検索し、対応する*Varまたは*Func、インデックスのシーケンス、そしてパスにおいてポインタ間接参照があったかどうかを示すブール値を返します。addressableが設定されている場合、Tはアドレス可能な変数の型です（メソッドの検索にのみ関係します）。Tはnilであってはなりません。
// 最後のインデックスエントリは、エントリが見つかった（埋め込まれた可能性のある）型のフィールドまたはメソッドのインデックスであり、次のいずれかです：
=======
// LookupSelection selects the field or method whose ID is Id(pkg,
// name), on a value of type T. If addressable is set, T is the type
// of an addressable variable (this matters only for method lookups).
// T must not be nil.
//
// If the selection is valid:
//
//   - [Selection.Obj] returns the field ([Var]) or method ([Func]);
//   - [Selection.Indirect] reports whether there were any pointer
//     indirections on the path to the field or method.
//   - [Selection.Index] returns the index sequence, defined below.
//
// The last index entry is the field or method index in the (possibly
// embedded) type where the entry was found, either:
//
//  1. the list of declared methods of a named type; or
//  2. the list of all methods (method set) of an interface type; or
//  3. the list of fields of a struct type.
//
// The earlier index entries are the indices of the embedded struct
// fields traversed to get to the found entry, starting at depth 0.
//
// See also [LookupFieldOrMethod], which returns the components separately.
func LookupSelection(T Type, addressable bool, pkg *Package, name string) (Selection, bool)

// LookupFieldOrMethod looks up a field or method with given package and name
// in T and returns the corresponding *Var or *Func, an index sequence, and a
// bool indicating if there were any pointer indirections on the path to the
// field or method. If addressable is set, T is the type of an addressable
// variable (only matters for method lookups). T must not be nil.
>>>>>>> upstream/release-branch.go1.25
//
//  1. 名前付き型の宣言されたメソッドのリスト
//  2. インターフェース型のすべてのメソッド（メソッドセット）のリスト
//  3. 構造体型のフィールドのリスト
//
<<<<<<< HEAD
// より早いインデックスエントリは、見つかったエントリに到達するためにトラバースされた埋め込まれた構造体フィールドのインデックスであり、depth 0から開始します。
// エントリが見つからない場合、nilオブジェクトが返されます。この場合、返されるインデックスとindirectの値の意味は次のとおりです：
//   - もしindex != nilなら、インデックスシーケンスは曖昧なエントリを指します（同じ名前が同じ埋め込みレベルで複数回現れました）。
//   - indirectが設定されている場合、ポインタレシーバータイプを持つメソッドが見つかりましたが、実際のレシーバータイプからメソッドの形式的なレシーバーベースタイプへのパスにポインタがなく、レシーバーがアドレス可能ではありませんでした。
=======
//  1. the list of declared methods of a named type; or
//  2. the list of all methods (method set) of an interface type; or
//  3. the list of fields of a struct type.
//
// The earlier index entries are the indices of the embedded struct fields
// traversed to get to the found entry, starting at depth 0.
//
// If no entry is found, a nil object is returned. In this case, the returned
// index and indirect values have the following meaning:
//
//   - If index != nil, the index sequence points to an ambiguous entry
//     (the same name appeared more than once at the same embedding level).
//
//   - If indirect is set, a method with a pointer receiver type was found
//     but there was no pointer on the path from the actual receiver type to
//     the method's formal receiver base type, nor was the receiver addressable.
//
// See also [LookupSelection], which returns the result as a [Selection].
>>>>>>> upstream/release-branch.go1.25
func LookupFieldOrMethod(T Type, addressable bool, pkg *Package, name string) (obj Object, index []int, indirect bool)

// MissingMethodは、VがTを実装している場合、(nil, false)を返します。そうでない場合、Tに必要な欠落しているメソッドと、欠落しているか、または単に間違った型（ポインタレシーバーまたは間違ったシグネチャ）を返します。
// 非インターフェース型V、またはstaticが設定されている場合、VがTを実装するには、TのすべてのメソッドがVに存在する必要があります。それ以外の場合（Vがインターフェースであり、staticが設定されていない場合）、MissingMethodは、Vにも存在するTのメソッドの型が一致していることだけをチェックします（例：型アサーションx.(T)の場合、xがインターフェース型Vである場合）。
func MissingMethod(V Type, T *Interface, static bool) (method *Func, wrongType bool)
