// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
// Source: ../../cmd/compile/internal/types2/scope.go

// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// このファイルはスコープを実装しています。

package types

import (
	"github.com/shogo82148/std/go/token"
	"github.com/shogo82148/std/io"
)

// スコープはオブジェクトのセットを保持し、それが含まれる（親）スコープと含まれる（子）スコープへのリンクを維持します。オブジェクトは名前で挿入および検索することができます。Scopeのゼロ値は使用可能な空のスコープです。
type Scope struct {
	parent   *Scope
	children []*Scope
	number   int
	elems    map[string]Object
	pos, end token.Pos
	comment  string
	isFunc   bool
}

// NewScopeは、指定された親スコープに含まれる新しい空のスコープを返します（存在する場合）。コメントはデバッグ用です。
func NewScope(parent *Scope, pos, end token.Pos, comment string) *Scope

// Parentはスコープの含まれる（親）スコープを返します。
func (s *Scope) Parent() *Scope

// Lenはスコープ要素の数を返します。
func (s *Scope) Len() int

// Namesはスコープ内の要素名をソートされた順序で返します。
func (s *Scope) Names() []string

// NumChildrenはsにネストされたスコープの数を返します。
func (s *Scope) NumChildren() int

// Childは0 <= i < NumChildren()の範囲でi番目の子スコープを返します。
func (s *Scope) Child(i int) *Scope

// Lookupは、名前が与えられたスコープs内のオブジェクトを返します。
// オブジェクトが存在する場合はそのオブジェクトを返し、存在しない場合はnilを返します。
func (s *Scope) Lookup(name string) Object

// Insertはオブジェクトobjをスコープsに挿入しようと試みます。
// sが既に同じ名前の代替オブジェクトaltを含んでいる場合、
// Insertはsを変更せずにaltを返します。
// そうでなければobjを挿入し、オブジェクトの親スコープが
// まだ設定されていない場合は設定し、nilを返します。
func (s *Scope) Insert(obj Object) Object

// WriteToはスコープの文字列表現をwに書き込みます。
// スコープ要素は名前順にソートされます。
// インデントのレベルはn >= 0で制御され、
// n == 0でインデントなしになります。
// recurseが設定されている場合、ネストされた（子）スコープも書き込みます。
func (s *Scope) WriteTo(w io.Writer, n int, recurse bool)

// Stringはデバッグ用のスコープの文字列表現を返します。
func (s *Scope) String() string
