// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
GofmtはGoプログラムの書式設定を行います。
インデントにはタブを使用し、整列にはスペースを使用します。
整列は、エディタが固定幅フォントを使用していることを前提としています。

明示的なパスのない場合、標準入力を処理します。 ファイルが指定された場合は、そのファイルに対して操作を行います。 ディレクトリが指定された場合は、そのディレクトリ内のすべての.goファイルに対して再帰的に操作を行います。 (ピリオドで始まるファイルは無視されます。)
デフォルトでは、gofmtは再フォーマットされたソースを標準出力に出力します。

使用方法:

	gofmt [flags] [path ...]

フラグは次のとおりです:

	-d
		再フォーマットされたソースを標準出力に出力しないでください。
		もしファイルの書式がgofmtと異なる場合は、差分を標準出力に表示します。
	-e
		すべての (不正なものも含む) エラーを表示します。
	-l
		再フォーマットされたソースを標準出力に出力しないでください。
		もしファイルの書式がgofmtと異なる場合は、ファイル名を標準出力に表示します。
	-r rule
		書式変更を行う前にソースに修正ルールを適用します。
	-s
		コードを簡略化しようとします (修正ルールの適用後、必要な場合)。
	-w
		再フォーマットされたソースを標準出力に出力しないでください。
		もしファイルの書式がgofmtと異なる場合は、gofmtのバージョンで上書きします。 上書き中にエラーが発生した場合、元のファイルは自動バックアップから復元されます。

デバッグサポート:

	-cpuprofile filename
		指定されたファイルにCPUプロファイルを書き込みます。

-rフラグで指定された書式変更ルールは、次の形式の文字列である必要があります:

	pattern -> replacement

パターンとリプレースメントの両方は、有効なGo式でなければなりません。
パターンでは、一文字の小文字識別子は任意の部分式に一致するワイルドカードとして機能し、リプレースメントで同じ識別子に置き換えられます。

gofmtは標準入力から読み込む場合、フルのGoプログラムまたはプログラムのフラグメントのいずれかを受け入れます。 プログラムのフラグメントは、文法的に有効な宣言リスト、文リスト、または式でなければなりません。 このようなフラグメントを書式設定する場合、gofmtは先頭のインデント、先頭と末尾のスペースを保持するため、Goプログラムの個々のセクションをパイプを通じてgofmtに渡すことで書式設定できます。

# 例

不要な括弧をチェックするためのファイル:

	gofmt -r '(a) -> a' -l *.go

括弧を削除するためのコマンド:

	gofmt -r '(a) -> a' -w *.go

パッケージツリーを明示的なスライスの上限から暗黙的な上限に変換するコマンド:

	gofmt -r 'α[β:len(α)] -> α[β:]' -w $GOROOT/src

# simplifyコマンド

-sオプションで実行すると、gofmtは可能な限り以下のソース変換を行います。

	[]T{T{}, T{}}
	という形式の配列、スライス、またはマップのコンポジットリテラルは次のように簡略化されます:
		[]T{{}, {}}

	以下の形式のスライス式は次のように簡略化されます:
		s[a:len(s)] -> s[a:]

	以下の形式の範囲式は次のように簡略化されます:
		for x, _ = range v {...} -> for x = range v {...}

	以下の形式の範囲式は次のように簡略化されます:
		for _ = range v {...} -> for range v {...}

これにより、以前のGoのバージョンと互換性のない変更が生じる場合があります。
*/package main
