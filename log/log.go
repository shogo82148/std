// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

<<<<<<< HEAD
// Package log implements a simple logging package. It defines a type, [Logger],
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// Every log message is output on a separate line: if the message being
// printed does not end in a newline, the logger will add one.
// The Fatal functions call [os.Exit](1) after writing the log message.
// The Panic functions call panic after writing the log message.
=======
// パッケージlogはシンプルなロギングパッケージを実装します。出力のフォーマットに関するメソッドを持つLoggerという型を定義します。
// また、Print[f|ln]、Fatal[f|ln]、Panic[f|ln]というヘルパー関数を通じてアクセス可能な、事前定義された'standard' Loggerもあります。
// これらは、手動でLoggerを作成するよりも使いやすいです。そのロガーは標準エラーに書き込み、各ログメッセージの日付と時間を印刷します。
// すべてのログメッセージは別々の行に出力されます：印刷されるメッセージが改行で終わらない場合、ロガーは一つ追加します。
// Fatal関数は、ログメッセージを書き込んだ後にos.Exit(1)を呼び出します。
// Panic関数は、ログメッセージを書き込んだ後にpanicを呼び出します。
>>>>>>> release-branch.go1.21
package log

import (
	"github.com/shogo82148/std/io"
	"github.com/shogo82148/std/sync"
	"github.com/shogo82148/std/sync/atomic"
)

<<<<<<< HEAD
// These flags define which text to prefix to each log entry generated by the [Logger].
// Bits are or'ed together to control what's printed.
// With the exception of the Lmsgprefix flag, there is no
// control over the order they appear (the order listed here)
// or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
=======
// これらのフラグは、Loggerによって生成される各ログエントリの先頭にどのテキストを追加するかを定義します。
// ビットはor'ed（論理和）されて、何が印刷されるかを制御します。
// Lmsgprefixフラグを除いて、それらが表示される順序（ここにリストされている順序）や
// 形式（コメントで説明されているように）を制御する方法はありません。
// プレフィックスは、LlongfileまたはLshortfileが指定されたときにのみコロンに続きます。
// 例えば、フラグLdate | Ltime（またはLstdFlags）は、
>>>>>>> release-branch.go1.21
//
//	2009/01/23 01:23:23 message
//
// フラグ Ldate | Ltime | Lmicroseconds | Llongfile は以下を生成します。
//
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate = 1 << iota
	Ltime
	Lmicroseconds
	Llongfile
	Lshortfile
	LUTC
	Lmsgprefix
	LstdFlags = Ldate | Ltime
)

<<<<<<< HEAD
// A Logger represents an active logging object that generates lines of
// output to an [io.Writer]. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
=======
// Loggerは、io.Writerに対して出力行を生成するアクティブなロギングオブジェクトを表します。
// 各ロギング操作は、WriterのWriteメソッドを一度だけ呼び出します。
// Loggerは複数のgoroutineから同時に使用することができます。これはWriterへのアクセスをシリアライズすることを保証します。
>>>>>>> release-branch.go1.21
type Logger struct {
	outMu sync.Mutex
	out   io.Writer

	prefix    atomic.Pointer[string]
	flag      atomic.Int32
	isDiscard atomic.Bool
}

<<<<<<< HEAD
// New creates a new [Logger]. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line, or
// after the log header if the [Lmsgprefix] flag is provided.
// The flag argument defines the logging properties.
=======
// Newは新しいLoggerを作成します。out変数はログデータが書き込まれる先を設定します。
// プレフィックスは、生成された各ログ行の先頭に表示されるか、
// Lmsgprefixフラグが提供されている場合はログヘッダーの後に表示されます。
// flag引数はログのプロパティを定義します。
>>>>>>> release-branch.go1.21
func New(out io.Writer, prefix string, flag int) *Logger

// SetOutputはロガーの出力先を設定します。
func (l *Logger) SetOutput(w io.Writer)

// Defaultは、パッケージレベルの出力関数で使用される標準ロガーを返します。
func Default() *Logger

// Outputはログイベントの出力を書き込みます。文字列sは、
// Loggerのフラグで指定されたプレフィックスの後に印刷するテキストを含みます。
// sの最後の文字がすでに改行でない場合、改行が追加されます。
// CalldepthはPCを回復するために使用され、一般性を提供しますが、
// 現時点ではすべての事前定義されたパスで2になります。
func (l *Logger) Output(calldepth int, s string) error

<<<<<<< HEAD
// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Print].
func (l *Logger) Print(v ...any)

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Printf].
func (l *Logger) Printf(format string, v ...any)

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Println].
func (l *Logger) Println(v ...any)

// Fatal is equivalent to l.Print() followed by a call to [os.Exit](1).
func (l *Logger) Fatal(v ...any)

// Fatalf is equivalent to l.Printf() followed by a call to [os.Exit](1).
func (l *Logger) Fatalf(format string, v ...any)

// Fatalln is equivalent to l.Println() followed by a call to [os.Exit](1).
=======
// Printはl.Outputを呼び出してロガーに出力します。
// 引数はfmt.Printの方法で処理されます。
func (l *Logger) Print(v ...any)

// Printfはl.Outputを呼び出してロガーに出力します。
// 引数はfmt.Printfの方法で処理されます。
func (l *Logger) Printf(format string, v ...any)

// Printlnはl.Outputを呼び出してロガーに出力します。
// 引数はfmt.Printlnの方法で処理されます。
func (l *Logger) Println(v ...any)

// Fatalはl.Print()の後にos.Exit(1)を呼び出すのと同等です。
func (l *Logger) Fatal(v ...any)

// Fatalfはl.Printf()の後にos.Exit(1)を呼び出すのと同等です。
func (l *Logger) Fatalf(format string, v ...any)

// Fatallnはl.Println()の後にos.Exit(1)を呼び出すのと同等です。
>>>>>>> release-branch.go1.21
func (l *Logger) Fatalln(v ...any)

// Panicはl.Print()の後にpanic()を呼び出すのと同等です。
func (l *Logger) Panic(v ...any)

// Panicfはl.Printf()の後にpanic()を呼び出すのと同等です。
func (l *Logger) Panicf(format string, v ...any)

// Paniclnはl.Println()の後にpanic()を呼び出すのと同等です。
func (l *Logger) Panicln(v ...any)

<<<<<<< HEAD
// Flags returns the output flags for the logger.
// The flag bits are [Ldate], [Ltime], and so on.
func (l *Logger) Flags() int

// SetFlags sets the output flags for the logger.
// The flag bits are [Ldate], [Ltime], and so on.
=======
// Flagsはロガーの出力フラグを返します。
// フラグビットはLdate、Ltimeなどです。
func (l *Logger) Flags() int

// SetFlagsはロガーの出力フラグを設定します。
// フラグビットはLdate、Ltimeなどです。
>>>>>>> release-branch.go1.21
func (l *Logger) SetFlags(flag int)

// Prefixはロガーの出力プレフィックスを返します。
func (l *Logger) Prefix() string

// SetPrefixはロガーの出力プレフィックスを設定します。
func (l *Logger) SetPrefix(prefix string)

// Writerはロガーの出力先を返します。
func (l *Logger) Writer() io.Writer

// SetOutputは標準ロガーの出力先を設定します。
func SetOutput(w io.Writer)

<<<<<<< HEAD
// Flags returns the output flags for the standard logger.
// The flag bits are [Ldate], [Ltime], and so on.
func Flags() int

// SetFlags sets the output flags for the standard logger.
// The flag bits are [Ldate], [Ltime], and so on.
=======
// Flagsは標準ロガーの出力フラグを返します。
// フラグビットはLdate、Ltimeなどです。
func Flags() int

// SetFlagsは標準ロガーの出力フラグを設定します。
// フラグビットはLdate、Ltimeなどです。
>>>>>>> release-branch.go1.21
func SetFlags(flag int)

// Prefixは標準ロガーの出力プレフィックスを返します。
func Prefix() string

// SetPrefixは標準ロガーの出力プレフィックスを設定します。
func SetPrefix(prefix string)

// Writerは標準ロガーの出力先を返します。
func Writer() io.Writer

<<<<<<< HEAD
// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of [fmt.Print].
func Print(v ...any)

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of [fmt.Printf].
func Printf(format string, v ...any)

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of [fmt.Println].
func Println(v ...any)

// Fatal is equivalent to [Print] followed by a call to [os.Exit](1).
func Fatal(v ...any)

// Fatalf is equivalent to [Printf] followed by a call to [os.Exit](1).
func Fatalf(format string, v ...any)

// Fatalln is equivalent to [Println] followed by a call to [os.Exit](1).
func Fatalln(v ...any)

// Panic is equivalent to [Print] followed by a call to panic().
func Panic(v ...any)

// Panicf is equivalent to [Printf] followed by a call to panic().
func Panicf(format string, v ...any)

// Panicln is equivalent to [Println] followed by a call to panic().
func Panicln(v ...any)

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if [Llongfile] or [Lshortfile] is set; a value of 1 will print the details
// for the caller of Output.
=======
// PrintはOutputを呼び出して標準ロガーに出力します。
// 引数はfmt.Printの方法で処理されます。
func Print(v ...any)

// PrintfはOutputを呼び出して標準ロガーに出力します。
// 引数はfmt.Printfの方法で処理されます。
func Printf(format string, v ...any)

// PrintlnはOutputを呼び出して標準ロガーに出力します。
// 引数はfmt.Printlnの方法で処理されます。
func Println(v ...any)

// FatalはPrint()の後にos.Exit(1)を呼び出すのと同等です。
func Fatal(v ...any)

// FatalfはPrintf()の後にos.Exit(1)を呼び出すのと同等です。
func Fatalf(format string, v ...any)

// FatallnはPrintln()の後にos.Exit(1)を呼び出すのと同等です。
func Fatalln(v ...any)

// PanicはPrint()の後にpanic()を呼び出すのと同等です。
func Panic(v ...any)

// PanicfはPrintf()の後にpanic()を呼び出すのと同等です。
func Panicf(format string, v ...any)

// PaniclnはPrintln()の後にpanic()を呼び出すのと同等です。
func Panicln(v ...any)

// Outputはログイベントの出力を書き込みます。文字列sは、
// Loggerのフラグで指定されたプレフィックスの後に印刷するテキストを含みます。
// sの最後の文字がすでに改行でない場合、改行が追加されます。
// Calldepthは、LlongfileまたはLshortfileが設定されている場合にファイル名と行番号を計算する際にスキップするフレームの数を表します。
// 値が1の場合、Outputの呼び出し元の詳細が印刷されます。
>>>>>>> release-branch.go1.21
func Output(calldepth int, s string) error
