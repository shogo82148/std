// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build goexperiment.jsonv2

package json

import (
	"github.com/shogo82148/std/encoding"
	"github.com/shogo82148/std/io"
	"github.com/shogo82148/std/time"

	"github.com/shogo82148/std/encoding/json/jsontext"
)

// Reference encoding and time packages to assist pkgsite
// in being able to hotlink references to those packages.
var (
	_ encoding.TextMarshaler
	_ encoding.TextAppender
	_ encoding.TextUnmarshaler
	_ time.Time
	_ time.Duration
)

// Marshalは、指定されたマーシャルおよびエンコードオプションに従って
// Go値を[]byteとしてシリアライズします（アンマーシャルやデコードオプションは無視されます）。
// 出力の末尾に改行は付加しません。
//
// 型固有のマーシャル関数やメソッドは、値のデフォルト表現よりも優先されます。
// *Tを操作する関数やメソッドは、T型の値（アドレスを取得）や非nilの*T値をエンコードする場合のみ呼び出されます。
// Marshalは、値が常にアドレス可能であることを保証します
// （必要に応じてヒープ上にボックス化）ので、これらの関数やメソッドを一貫して呼び出せます。
// パフォーマンスのため、Marshalには非nilポインタ値を渡すことを推奨します。
//
// 入力値は以下のルールに従ってJSONとしてエンコードされます：
//
//   - [WithMarshalers] オプション内の型固有関数が値の型に一致する場合、
//     それらの関数が値のエンコードに呼び出されます。
//     適用可能な関数がすべて [SkipFunc] を返した場合、
//     以降のルールに従って値がエンコードされます。
//
//   - 値の型が [MarshalerTo] を実装している場合、
//     MarshalJSONToメソッドが呼び出されます。
//
//   - 値の型が [Marshaler] を実装している場合、
//     MarshalJSONメソッドが呼び出されます。
//
//   - 値の型が [encoding.TextAppender] を実装している場合、
//     AppendTextメソッドが呼び出され、その結果がJSON文字列としてエンコードされます。
//
//   - 値の型が [encoding.TextMarshaler] を実装している場合、
//     MarshalTextメソッドが呼び出され、その結果がJSON文字列としてエンコードされます。
//
//   - それ以外の場合、値の型に応じて以下の詳細なルールでエンコードされます。
//
// ほとんどのGo型にはデフォルトのJSON表現があります。
// 一部の型は、Go構造体フィールドのタグで指定できるフォーマットフラグにより
// 特殊なフォーマットをサポートします（詳細は「Go構造体のJSON表現」セクション参照）。
//
// 各型の表現は以下の通りです：
//
//   - Goのbool型はJSONの真偽値（true/false）としてエンコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goのstring型はJSON文字列としてエンコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの[]byteや[N]byte型は、RFC 4648でエンコードされたバイナリ値を含む
//     JSON文字列としてエンコードされます。
//     フォーマットが"base64"または未指定の場合はRFC 4648のsection 4、
//     "base64url"ならsection 5、"base32"ならsection 6、
//     "base32hex"ならsection 7、"base16"や"hex"ならsection 8を使用します。
//     フォーマットが"array"の場合、各バイトをJSON配列の要素として再帰的にエンコードします。
//
//   - Goの整数型は、小数や指数部のないJSON数値としてエンコードされます。
//     [StringifyNumbers] が指定されている場合やJSONオブジェクト名をエンコードする場合、
//     JSON数値はJSON文字列内にエンコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの浮動小数点型はJSON数値としてエンコードされます。
//     [StringifyNumbers] が指定されている場合やJSONオブジェクト名をエンコードする場合、
//     JSON数値はJSON文字列内にエンコードされます。
//     フォーマットが"nonfinite"の場合、NaN、+Inf、-Infは
//     "NaN"、"Infinity"、"-Infinity"というJSON文字列としてエンコードされます。
//     それ以外の場合、非有限値があると [SemanticError] になります。
//
//   - Goのmap型はJSONオブジェクトとしてエンコードされ、
//     各Goマップのキーと値がJSONオブジェクトの名前と値のペアとして再帰的にエンコードされます。
//     GoマップのキーはJSON文字列としてエンコードできなければ [SemanticError] になります。
//     Goマップの走査順は非決定的です。決定的なエンコードには [Deterministic] オプションを検討してください。
//     フォーマットが"emitnull"ならnilマップはJSON null、
//     "emitempty"ならnilマップは空のJSONオブジェクトとしてエンコードされます。
//     それ以外はデフォルトでnilマップは空のJSONオブジェクトになります。
//
//   - Goの構造体はJSONオブジェクトとしてエンコードされます。
//     詳細はパッケージレベルの「Go構造体のJSON表現」セクション参照。
//
//   - GoのスライスはJSON配列としてエンコードされ、
//     各要素がJSON配列の要素として再帰的にエンコードされます。
//     フォーマットが"emitnull"ならnilスライスはJSON null、
//     "emitempty"ならnilスライスは空のJSON配列としてエンコードされます。
//     それ以外はデフォルトでnilスライスは空のJSON配列になります。
//
//   - Goの配列はJSON配列としてエンコードされ、
//     各要素がJSON配列の要素として再帰的にエンコードされます。
//     JSON配列の長さはGo配列の長さと常に一致します。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goのポインタ型はnilならJSON null、そうでなければ
//     基底値を再帰的にJSONエンコードした表現になります。
//     フォーマットフラグは基底値のエンコードに引き継がれます。
//
//   - Goのインターフェース型はnilならJSON null、そうでなければ
//     基底値を再帰的にJSONエンコードした表現になります。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの [time.Time] 型はRFC 3339（ナノ秒精度）でフォーマットされた
//     タイムスタンプを含むJSON文字列としてエンコードされます。
//     timeパッケージで宣言されたフォーマット定数（例：RFC1123）に一致する場合はそのフォーマットを使用します。
//     フォーマットが"unix"、"unixmilli"、"unixmicro"、"unixnano"の場合、
//     タイムスタンプはUnixエポック（1970年1月1日00:00:00 UTC）からの
//     秒数（またはミリ秒、マイクロ秒、ナノ秒）を表すJSON数値としてエンコードされます。
//     小数部を避けるには該当単位に丸めてください。
//     それ以外は非空なら [time.Time.Format] でそのフォーマットを使用します。
//
//   - Goの [time.Duration] 型はデフォルト表現がなく、明示的なフォーマット指定が必要です。
//     フォーマットが"sec"、"milli"、"micro"、"nano"の場合、
//     継続時間は秒数（またはミリ秒、マイクロ秒、ナノ秒）を表すJSON数値としてエンコードされます。
//     小数部を避けるには該当単位に丸めてください。
//     フォーマットが"units"なら [time.Duration.String] でフォーマットされたJSON文字列、
//     "iso8601"ならISO 8601標準のJSON文字列（例："PT1H30M"）としてエンコードされます。
//     単位は時間、分、秒のみ正確に扱います。
//
//   - その他のGo型（複素数、チャネル、関数など）はデフォルト表現がなく、[SemanticError] になります。
//
// JSONは循環データ構造を表現できず、Marshalはそれらを扱いません。
// 循環構造を渡すとエラーになります。
func Marshal(in any, opts ...Options) (out []byte, err error)

// MarshalWriteは、指定されたマーシャルおよびエンコードオプションに従って
// Go値を [io.Writer] にシリアライズします（アンマーシャルやデコードオプションは無視されます）。
// 出力の末尾に改行は付加しません。
// Go値をJSONへ変換する詳細は [Marshal] を参照してください。
func MarshalWrite(out io.Writer, in any, opts ...Options) (err error)

// MarshalEncodeは、指定されたマーシャルオプションに従って
// Go値を [jsontext.Encoder] にシリアライズします（アンマーシャル、エンコード、デコードオプションは無視されます）。
// [jsontext.Encoder] に既に指定されているマーシャル関連のオプションは、呼び出し元が指定したオプションよりも優先度が低くなります。
// [Marshal] や [MarshalWrite] と異なり、エンコードオプションは無視されます。
// これは、エンコードオプションが既に指定済みである必要があるためです。
//
// Go値をJSONへ変換する詳細は [Marshal] を参照してください。
func MarshalEncode(out *jsontext.Encoder, in any, opts ...Options) (err error)

// Unmarshalは、指定されたアンマーシャルおよびデコードオプションに従って
// []byte入力をGo値へデコードします（マーシャルやエンコードオプションは無視されます）。
// 入力は、空白を含んでもよい単一のJSON値でなければなりません。
// 出力は非nilのポインタでなければなりません。
//
// 型固有のアンマーシャル関数やメソッドは、値のデフォルト表現よりも優先されます。
// *Tを操作する関数やメソッドは、T型の値（アドレスを取得）や非nilの*T値をデコードする場合のみ呼び出されます。
// Unmarshalは、値が常にアドレス可能であることを保証します
// （必要に応じてヒープ上にボックス化）ので、これらの関数やメソッドを一貫して呼び出せます。
//
// 入力は以下のルールに従って出力へデコードされます：
//
//   - [WithUnmarshalers] オプション内の型固有関数が値の型に一致する場合、
//     それらの関数がJSON値のデコードに呼び出されます。
//     適用可能な関数がすべて [SkipFunc] を返した場合、
//     以降のルールに従ってデコードされます。
//
//   - 値の型が [UnmarshalerFrom] を実装している場合、
//     UnmarshalJSONFromメソッドが呼び出されます。
//
//   - 値の型が [Unmarshaler] を実装している場合、
//     UnmarshalJSONメソッドが呼び出されます。
//
//   - 値の型が [encoding.TextUnmarshaler] を実装している場合、
//     入力はJSON文字列としてデコードされ、
//     デコードされた文字列値でUnmarshalTextメソッドが呼び出されます。
//     入力がJSON文字列でない場合は [SemanticError] になります。
//
//   - それ以外の場合、値の型に応じて以下の詳細なルールでデコードされます。
//
// ほとんどのGo型にはデフォルトのJSON表現があります。
// 一部の型は、Go構造体フィールドのタグで指定できるフォーマットフラグにより
// 特殊なフォーマットをサポートします（詳細は「Go構造体のJSON表現」セクション参照）。
// JSON nullは、サポートされるすべてのGo値にデコード可能であり、Go値のゼロ値を格納するのと同等です。
// 入力JSONの種類が現在のGo値型で扱えない場合は [SemanticError] になります。
// 特に指定がない限り、デコードされた値は既存の値を置き換えます。
//
// 各型の表現は以下の通りです：
//
//   - Goのbool型はJSONの真偽値（true/false）からデコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goのstring型はJSON文字列からデコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの[]byteや[N]byte型は、RFC 4648でエンコードされたバイナリ値を含む
//     JSON文字列からデコードされます。
//     フォーマットが"base64"または未指定の場合はRFC 4648のsection 4、
//     "base64url"ならsection 5、"base32"ならsection 6、
//     "base32hex"ならsection 7、"base16"や"hex"ならsection 8を使用します。
//     フォーマットが"array"の場合、Goスライスや配列はJSON配列からデコードされ、
//     各JSON要素が各バイトに再帰的にデコードされます。
//     非nilの[]byteへデコードする場合、スライス長はゼロにリセットされ、デコード結果が追加されます。
//     [N]byteへデコードする場合、入力は必ずNバイトでなければならず、そうでなければ [SemanticError] になります。
//
//   - Goの整数型はJSON数値からデコードされます。
//     [StringifyNumbers] が指定されている場合やJSONオブジェクト名をデコードする場合、
//     JSON文字列内のJSON数値からデコードされます。
//     JSON数値に小数部や指数部がある場合は [SemanticError] になります。
//     Go整数型の表現をオーバーフローした場合も失敗します。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの浮動小数点型はJSON数値からデコードされます。
//     [StringifyNumbers] が指定されている場合やJSONオブジェクト名をデコードする場合、
//     JSON文字列内のJSON数値からデコードされます。
//     Go浮動小数点型の表現をオーバーフローした場合は失敗します。
//     フォーマットが"nonfinite"の場合、JSON文字列"NaN"、"Infinity"、"-Infinity"は
//     NaN、+Inf、-Infとしてデコードされます。
//     それ以外の場合、これらの文字列があると [SemanticError] になります。
//
//   - Goのmap型はJSONオブジェクトからデコードされ、
//     各JSONオブジェクト名と値のペアがGoマップのキーと値として再帰的にデコードされます。
//     マップはクリアされません。
//     Goマップがnilの場合、新しいマップが割り当てられます。
//     デコードされたキーが既存のGoマップエントリと一致する場合、エントリ値は再利用され、JSONオブジェクト値がそこへデコードされます。
//     "emitnull"や"emitempty"フォーマットはデコード時には効果がありません。
//
//   - Goの構造体はJSONオブジェクトからデコードされます。
//     詳細はパッケージレベルの「Go構造体のJSON表現」セクション参照。
//
//   - GoのスライスはJSON配列からデコードされ、各JSON要素が再帰的にデコードされてGoスライスに追加されます。
//     Goスライスがnilの場合は新しいスライスが割り当てられ、そうでなければスライス長はゼロにリセットされます。
//     "emitnull"や"emitempty"フォーマットはデコード時には効果がありません。
//
//   - Goの配列はJSON配列からデコードされ、各JSON配列要素が対応するGo配列要素に再帰的にデコードされます。
//     各Go配列要素はデコード前にゼロ化されます。
//     JSON配列の要素数がGo配列と一致しない場合は [SemanticError] になります。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goのポインタ型はJSONの種類と基底Go型に基づいてデコードされます。
//     入力がJSON nullの場合はnilポインタになります。
//     そうでなければ、ポインタがnilの場合は新しい基底値が割り当てられ、基底値へ再帰的にJSONデコードされます。
//     フォーマットフラグは基底型のデコードに引き継がれます。
//
//   - Goのインターフェース型はJSONの種類と基底Go型に基づいてデコードされます。
//     入力がJSON nullの場合はnilインターフェース値になります。
//     そうでなければ、空のインターフェース型のnil値は、入力がJSONの真偽値、文字列、数値、オブジェクト、配列の場合に
//     それぞれゼロ値のGo bool、string、float64、map[string]any、[]anyで初期化されます。
//     インターフェース値がまだnilの場合は [SemanticError] になります（デコード先のGo型が決定できないため）。
//     例として、nilのio.Readerへアンマーシャルすると失敗します（具体型がないため）。
//     それ以外は基底値が存在し、JSON入力がそこへ再帰的にデコードされます。
//     カスタムフォーマットフラグはサポートしません。
//
//   - Goの [time.Time] 型はRFC 3339（ナノ秒精度）でフォーマットされた
//     JSON文字列からデコードされます。
//     timeパッケージで宣言されたフォーマット定数（例：RFC1123）に一致する場合はそのフォーマットでパースされます。
//     フォーマットが"unix"、"unixmilli"、"unixmicro"、"unixnano"の場合、
//     タイムスタンプはUnixエポック（1970年1月1日00:00:00 UTC）からの
//     秒数（またはミリ秒、マイクロ秒、ナノ秒）を表すJSON数値（小数部可）からデコードされます。
//     それ以外は非空なら [time.Time.Parse] でそのフォーマットが使われます。
//
//   - Goの [time.Duration] 型はデフォルト表現がなく、明示的なフォーマット指定が必要です。
//     フォーマットが"sec"、"milli"、"micro"、"nano"の場合、
//     継続時間は秒数（またはミリ秒、マイクロ秒、ナノ秒）を表すJSON数値（小数部可）からデコードされます。
//     フォーマットが"units"なら [time.ParseDuration] でパースされるJSON文字列（例："1h30m"）からデコードされます。
//     フォーマットが"iso8601"ならISO 8601標準のJSON文字列（例："PT1H30M"）からデコードされ、
//     時間、分、秒のみ正確に扱います。
//
//   - その他のGo型（複素数、チャネル、関数など）はデフォルト表現がなく、[SemanticError] になります。
//
// 一般に、アンマーシャルはマージセマンティクス（RFC 7396に類似）に従い、
// デコードされたGo値はJSONオブジェクト以外の種類では出力値を置き換えます。
// JSONオブジェクトの場合、入力オブジェクトは出力値にマージされ、
// 一致するメンバーは再帰的にマージセマンティクスが適用されます。
func Unmarshal(in []byte, out any, opts ...Options) (err error)

// UnmarshalReadは、指定されたアンマーシャルおよびデコードオプションに従って
// [io.Reader] からGo値をデシリアライズします（マーシャルやエンコードオプションは無視されます）。
// 入力は空白を含んでもよい単一のJSON値でなければなりません。
// [io.Reader] 全体を [io.EOF] に達するまで消費し、EOFでエラーを報告しません。
// 出力は非nilのポインタでなければなりません。
// JSONからGo値への変換の詳細は [Unmarshal] を参照してください。
func UnmarshalRead(in io.Reader, out any, opts ...Options) (err error)

// UnmarshalDecodeは、指定されたアンマーシャルオプションに従って
// [jsontext.Decoder] からGo値をデシリアライズします（マーシャル、エンコード、デコードオプションは無視されます）。
// [jsontext.Decoder] に既に指定されているアンマーシャルオプションは、呼び出し元が指定したオプションよりも優先度が低くなります。
// [Unmarshal] や [UnmarshalRead] と異なり、デコードオプションは無視されます。
// これは、デコードオプションが既に指定済みである必要があるためです。
//
// 入力は1つ以上のJSON値のストリームである場合があり、
// この関数はストリーム中の次のJSON値のみをアンマーシャルします。
// 出力は非nilのポインタでなければなりません。
// JSONからGo値への変換の詳細は [Unmarshal] を参照してください。
func UnmarshalDecode(in *jsontext.Decoder, out any, opts ...Options) (err error)
